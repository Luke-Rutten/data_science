{
  "hash": "144fc4363b99018964d0a98642021c1c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simplifying Nested For-Loops in Python and R\"\ndescription: \"Make iteration easy to write, easy to read, and easy to parallelize with these simple functions\"\nauthor: \"Luke Rutten\"\ndate: \"2024-10-02\"\nimage: \"for_loops_image2.png\"\ncategories:\n  - Python\n  - R\n  - Programming\n  - 3 Minute Read\n---\n\n\n# The Quick Answer:\n\nUse specific functions to create a data frame of the Cartesian product of vectors passed to them, which can then be iterated across with just one loop (or parallelized).\n\nThe function in Python: `itertools.product()`\n\nThe function in R: `tidyr::expand_grid()`\n\n# The Full Explanation:\n\nLet's say you're running a simulation study and you've been tasked with gathering performance data across a wide range of conditions. Maybe you're working for a car company that's trying to perfect its new line of fuel injectors and you need to assess the efficacy of the product across the full range of:\n\n- Engine sizes\n- Engine temperatures\n- Manufacturers\n- Levels of remaining fuel\n- Car mileages\n- Car speeds\n\nTo capture performance across the full range of possible conditions here, you're going to need to run hundreds or maybe even thousands of simulations! That's way too many to try running one at a time but, lucky for you, you know a thing or two about programming. So you go ahead and define your parameters, then write some for-loops to iterate across conditions.\n\nLet's check out a simplified version of what that might look like.\n\n### Set parameters\n\nYou don't technically need to define your parameters outside the loop, but doing so makes for code that's both more readable *and* easier to modify later.\n\n::: panel-tabset\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nengine_sizes = [2.4, 3.2]\nengine_temps = [180, 200, 220]\nmanufacturers = ['Toyota', 'Mazda', 'Honda']\nfuel_levels = [0.25, 0.75]\nmiles = [50000, 100000, 150000]\nspeeds = [30, 50, 80]\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nengine_sizes = c(2.4, 3.2)\nengine_temps = c(180, 200, 220)\nmanufacturers = c(\"Toyota\", \"Mazda\", \"Honda\")\nfuel_levels = c(0.25, 0.75)\nmiles = c(50000, 100000, 150000)\nspeeds = c(30, 50, 80)\n```\n:::\n\n:::\n\nAnd now that your parameter space is defined, you can go ahead and iterate across it.\n\n### Nested for-loops\n::: panel-tabset\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Write nested for-loops to capture every parameter combination\nfor size in engine_sizes:\n  for temp in engine_temps:\n    for manufac in manufacturers:\n      for fuel in fuel_levels:\n        for mile in miles:\n          for mph in speeds:\n        \n            some_function(arg_1 = size, arg_2 = temp, arg_3 = manufac, arg_4 = fuel, arg_5 = mile, arg_6 = mph)\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write nested for-loops to capture every parameter combination\nfor (size in engine_sizes){\n  for (temp in temps){\n    for (manufac in manufacturers){\n      for (fuel in fuel_levels){\n        for (mile in miles){\n          for (mph in speeds){\n        \n            some_function(arg_1 = size, arg_2 = temp, arg_3 = manufac, arg_4 = fuel, arg_5 = mile, arg_6 = mph)\n          }\n        }\n      }\n    }\n  }\n}\n```\n:::\n\n:::\n\nThis code has been simplified for the sake of the example, but we're already beginning to see an issue. Code that's been indented 6 times is just hard to read! Now imagine a problem where you have to take into account not just 6 parameters, but 10 or 20 or even 30.\n\nIt would be a nightmare.\n\nBut it's not like we can avoid iteration just because it's hard to read, so what can be done?\n\n### The Solution: Cartesian Products\n\nBecause a single for-loop is limited to iteration across just one dimension, we need a way to condense all of our parameters (6, in this example) into just one dimension. This could be done as a data frame, a list of lists, or perhaps even as a dictionary of parameters.\n\nWhichever route we choose to go, it's not enough just to include our parameters separate from one another. Rather, we need each value to contain a unique combination of parameters and we need every unique combination to be present.\n\nLuckily for us, most coding languages (and the communities supporting them) have already laid the groundwork to enable us to do this with ease. In Python, we can use `itertools.product()` and, in R, we can use `tidyr::expand_grid()`. These functions take the data frame approach, calculating every unique combination of parameters and storing the output in individual rows of a data frame.\n\n::: panel-tabset\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nengine_sizes = [2.4, 3.2]\nengine_temps = [180, 200, 220]\n\npd.DataFrame(itertools.product(engine_sizes, engine_temps))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     0    1\n0  2.4  180\n1  2.4  200\n2  2.4  220\n3  3.2  180\n4  3.2  200\n5  3.2  220\n```\n\n\n:::\n:::\n\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\nengine_sizes = c(2.4, 3.2)\nengine_temps = c(180, 200, 220)\n\ntidyr::expand_grid(engine_sizes, engine_temps)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  engine_sizes engine_temps\n         <dbl>        <dbl>\n1          2.4          180\n2          2.4          200\n3          2.4          220\n4          3.2          180\n5          3.2          200\n6          3.2          220\n```\n\n\n:::\n:::\n\n:::\n\nAnd once we have that, all we need to do is iterate across each row of the newly created data frame! Each row contains all the parameter information we'll need, so we just extract that information within the loop as we iterate through it.\n\nNow, putting it all together, here's what code for that might look like:\n\n::: panel-tabset\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# load necessary packages\nimport pandas as pd\nfrom itertools import product\n\n# Create a single data frame using the Cartesian product of your parameters\nparams = pd.DataFrame(product(engine_sizes, engine_temps, manufacturers,\n                              fuel_levels, miles, speeds))\n\n# Run just one loop across each row of your data frame\nfor row in np.arange(params.shape[0]):\n  some_function(arg_1 = params.iloc[row, 0],\n                arg_2 = params.iloc[row, 1],\n                arg_3 = params.iloc[row, 2],\n                arg_4 = params.iloc[row, 3],\n                arg_5 = params.iloc[row, 4],\n                arg_6 = params.iloc[row, 5])\n```\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load necessary packages\nlibrary(tidyverse)\n\n# Create a single data frame using the Cartesian product of your parameters\nparams = expand_grid(engine_sizes, engine_temps, manufacturers,\n                     fuel_levels, miles, speeds)\n\n# Run just one loop across each row of your data frame\nfor (row in nrow(params)) {\n  some_function(arg_1 = params[[row, 1]],\n                arg_2 = params[[row, 2]],\n                arg_3 = params[[row, 3]],\n                arg_4 = params[[row, 4]],\n                arg_5 = params[[row, 5]]\n                arg_6 = params[[row, 6]])\n}\n```\n:::\n\n:::\n\nAnd it's really that simple. \n\nUsing this approach, it doesn't matter how many parameters you're working with; the amount of loops you need will only ever be one.\n\n\n### The True Power of this Approach\n\nAs the experienced reader may have already realized, this approach not only makes it easier to read and write nested for-loops, it also makes it much simpler to parallelize them. With nested loops, you're limited to parallelizing just one level at a time or worrying about nested threads if you're brave enough to dare trying multiple. With the Cartesian approach, however, you can reach every combination of parameters with just one parallelized operation, making full use of your computing resources and freeing up your time and attention to think about more important things like how in the world you're going to visualize all this awesome data you've just collected.\n\nThat, however, is a topic for another post ;)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}